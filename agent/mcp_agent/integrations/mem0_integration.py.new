"""
Mem0 integration for the MCP Agent.
Provides memory functionality using Mem0.
"""

import os
import logging
from typing import List, Dict, Any, Optional

# Configure basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Use try-except for mem0 import in case it causes issues
try:
    from mem0 import MemoryClient
    MEM0_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Failed to import mem0. Memory features will be unavailable: {e}")
    MemoryClient = None  # Define as None if import fails
    MEM0_AVAILABLE = False

# Automatically load environment variables if python-dotenv is installed
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logger.warning("python-dotenv not found, skipping loading .env file")

class Mem0MemoryManager:
    """Manages interactions with the Mem0 service for semantic memory.
    
    This class provides methods to store and retrieve memories using Mem0.
    It handles the connection to the Mem0 service and provides a fallback
    if Mem0 is not available.
    """
    
    def __init__(self):
        """Initialize the Mem0 memory manager."""
        self.enabled = MEM0_AVAILABLE
        self.api_key = os.getenv("MEM0_API_KEY", "")
        
        if not self.enabled:
            logger.warning("Mem0 not available. Memory features will be disabled.")
            self.client = None
            return
            
        if not self.api_key:
            logger.warning("Mem0 API key not found. Memory features will be disabled.")
            self.enabled = False
            self.client = None
            return
            
        try:
            self.client = MemoryClient(api_key=self.api_key)
            logger.info("Mem0 client initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize Mem0 client: {e}")
            self.enabled = False
            self.client = None
    
    async def add_memory(self, user_id: str, content: Optional[str] = None, 
                         messages: Optional[List[Dict[str, str]]] = None, 
                         metadata: Optional[dict] = None) -> Any:
        """Adds a memory or a list of messages to Mem0 for a specific user.
        
        Provide either 'content' for a single memory string or 'messages' for a conversation list.
        
        Args:
            user_id: The identifier for the user whose memory is being added.
            content: A single string content for the memory.
            messages: A list of message dictionaries (e.g., [{'role': 'user', 'content': '...'}]).
            metadata: Optional metadata to associate with the memory.
            
        Returns:
            The result from the Mem0 client's add operation.
            
        Raises:
            ValueError: If neither content nor messages are provided.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory storage")
            return None
            
        if not content and not messages:
            raise ValueError("Either 'content' or 'messages' must be provided.")
        
        add_kwargs = {"user_id": user_id}
        if metadata:
            add_kwargs["metadata"] = metadata
        
        try:
            logger.info(f"Adding memory for user_id: {user_id}")
            if messages:
                result = self.client.add(messages=messages, **add_kwargs)
            else:  # content must be provided due to the check above
                result = self.client.add(content=content, **add_kwargs)
            logger.info(f"Mem0 add result: {result}")
            return result
        except Exception as e:
            logger.error(f"Error adding memory to Mem0 for user {user_id}: {e}")
            return None
    
    async def store_memory(self, content: str, metadata: Optional[Dict[str, Any]] = None) -> Optional[str]:
        """
        Store a memory in Mem0 (alias for add_memory without user_id).
        
        Args:
            content: The content to store
            metadata: Optional metadata for the memory
            
        Returns:
            Optional[str]: The memory ID if successful, None otherwise
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory storage")
            return None
            
        try:
            memory_id = self.client.add(content=content, metadata=metadata or {})
            return memory_id
        except Exception as e:
            logger.error(f"Error storing memory in Mem0: {e}")
            return None
    
    async def search_memory(self, user_id: str, query: str, limit: int = 5, 
                           filters: Optional[Dict] = None) -> List[Dict[str, Any]]:
        """Searches for relevant memories for a specific user based on a query.
        
        Args:
            user_id: The identifier for the user whose memory is being searched.
            query: The search query string.
            limit: The maximum number of results to return.
            filters: Optional filters to apply to the search.
            
        Returns:
            A list of memory dictionaries matching the query.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory retrieval")
            return []
            
        try:
            logger.info(f"Searching memory for user_id: {user_id} with query: '{query[:50]}...'")
            search_kwargs = {"user_id": user_id, "limit": limit}
            if filters:
                search_kwargs["filters"] = filters
            
            results = self.client.search(query=query, **search_kwargs)
            logger.info(f"Mem0 search returned {len(results)} results.")
            return results
        except Exception as e:
            logger.error(f"Error searching Mem0 memory for user {user_id}: {e}")
            return []
    
    async def retrieve_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """
        Retrieve memories from Mem0 based on a query (without user_id).
        
        Args:
            query: The query to search for
            limit: Maximum number of results to return
            
        Returns:
            List[Dict[str, Any]]: The retrieved memories
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory retrieval")
            return []
            
        try:
            results = self.client.search(query=query, limit=limit)
            return results
        except Exception as e:
            logger.error(f"Error retrieving memories from Mem0: {e}")
            return []
    
    async def get_all_memories(self, user_id: str) -> List[Dict[str, Any]]:
        """Retrieves all memories associated with a specific user.
        
        Args:
            user_id: The identifier for the user.
            
        Returns:
            A list of all memory dictionaries for the user.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory retrieval")
            return []
            
        try:
            logger.info(f"Getting all memories for user_id: {user_id}")
            memories = self.client.get_all(user_id=user_id)
            logger.info(f"Mem0 get_all returned {len(memories)} memories.")
            return memories
        except Exception as e:
            logger.error(f"Error getting all memories from Mem0 for user {user_id}: {e}")
            return []
    
    async def get_memory(self, memory_id: str) -> Optional[Dict[str, Any]]:
        """Retrieves a specific memory by its ID.
        
        Args:
            memory_id: The unique identifier of the memory.
            
        Returns:
            The memory dictionary if found, otherwise None.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory retrieval")
            return None
            
        try:
            logger.info(f"Getting memory with id: {memory_id}")
            memory = self.client.get(memory_id=memory_id)
            logger.info(f"Mem0 get returned: {memory is not None}")
            return memory
        except Exception as e:
            logger.error(f"Error getting memory {memory_id} from Mem0: {e}")
            return None
    
    async def update_memory(self, memory_id: str, data: Dict[str, Any]) -> Any:
        """Updates an existing memory.
        
        Args:
            memory_id: The ID of the memory to update.
            data: A dictionary containing the fields to update.
            
        Returns:
            The result from the Mem0 client's update operation.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory update")
            return None
            
        try:
            logger.info(f"Updating memory with id: {memory_id}")
            result = self.client.update(memory_id=memory_id, data=data)
            logger.info(f"Mem0 update result: {result}")
            return result
        except Exception as e:
            logger.error(f"Error updating memory {memory_id} in Mem0: {e}")
            return None
    
    async def delete_memory(self, memory_id: str) -> bool:
        """Deletes a specific memory by its ID.
        
        Args:
            memory_id: The ID of the memory to delete.
            
        Returns:
            True if successful, False otherwise.
        """
        if not self.enabled or not self.client:
            logger.warning("Mem0 not enabled, skipping memory deletion")
            return False
            
        try:
            logger.info(f"Deleting memory with id: {memory_id}")
            self.client.delete(memory_id=memory_id)
            return True
        except Exception as e:
            logger.error(f"Error deleting memory {memory_id} from Mem0: {e}")
            return False

# Note: The Mem0 Python client itself doesn't appear to be inherently async based on docs.
# These async wrappers execute the synchronous client calls within the async function,
# allowing them to be awaited in an async environment (like LangGraph/FastAPI).
